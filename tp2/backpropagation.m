%Algoritmo de Entrenamiento de BACKPROPAGATION para Redes Neuronalesfunction learn = backpropagation(XE, S, rate, alfa, dmse)  mse = Inf;                  %Asumiendo Pesos Iniciales Malos  epoch = 1;                  %Rango de valores iniciales [-1 1]  [N, P] = size(XE);           %Numero de Patrones P y Entradas N    X = ones(4, P) * -1;  X(2:4, :) = XE(1:3, :);    [N, P] = size(X);        %[Q, P] = size(D);           %Numero de Patrones P y Salidas Q   depth = 4;                  %Profundidad de la red (nro capas)    %Inicializar Matriz de Pesos para cada capa en el rango [-1,1]  W = cell(depth, 1);  W{1} = 2.*rand(2, 4) - 1;  W{2} = 2.*rand(4, 3) - 1;  W{3} = 2.*rand(1, 4) - 1;  %Inicializar Matrices de los delta-pesos de ajuste  dW = zeros(1, depth - 1);              %Pre-alocacion de los delta pesos  %Inicializar los campos locales inducidos 'v'  V = cell(depth, 1);  V{2} = ones(4,1);  V{3} = ones(3,1);  V{4} = ones(4,1);    %Inicializar las salidas 'y' de cada capa  y = cell(1, depth-1);             %Pre-alocacion de las salidas locales  %% 2. Calculo Forward y Backward para cada epoch  while (mse > dmse) && (epoch <= 10000)      %e = zeros(Q, P);      %err = zeros(1, P);            for p = 1 : P          %Calculo Forward capa-por-capa para cada patron p          V{1} = X(:, p);                    for i = 2 : depth              y{i} = W{i-1} * V{i};                            if i < depth - 1                  V{i+1}(2 : end) = tanh(y{i}); %Calculo de la salida con tangente hiperbolica              else                  V{i+1} = tanh(y{i});          %Calculo de la salida              end              V{i+1}(1) = -1;                        end          V                           %Calculo de la seÃ±al de error          e(:, p) = D(:, p) - v{end};                    %Calculo de la energia del error          if size(D, 1) == 1              err(1, p) = 0.5 * (e(:, p).^2);          elseif size(D, 1) > 1              err(1, p) = 0.5 * sum(e(:, p).^2);          end                    %Calculo Backward capa-por-capa para cada patron p                  delta = e(:, p).*(tansig('dn', y{end}));                    %Ajuste de pesos          for i = depth-1 : -1 : 1                               dW{i} = rate * delta * v{i}' + alfa.*dW{i};              W{i} = W{i} + dW{i};                            if i > 1                  delta = tansig('dn', y{i-1}).* (delta' * W{i}(:, 1 : end - 1))';              end          end                end            %Calculo del mean square error      mse = (1 / P) * sum(err);      epoch = epoch + 1;      hold on      figure(2)      semilogx(epoch, mse, 'ro')      hold off  end  learn.pesos = W;  learn.epocas = epoch;  learn.estructura = L;  learn.error = mse;endfunction