%Algoritmo de Entrenamiento de BACKPROPAGATION para Redes Neuronalesfunction learn = backpropagation(XE, S, epochNumber, learnNumber, rate, alfa, dmse)  mse = Inf;                  %Asumiendo Pesos Iniciales Malos  epoch = 0;                  %Rango de valores iniciales [-1 1]  [P, N] = size(XE);           %Numero de Patrones P y Entradas N    %X = ones(learnNumber, P) * -1;  %X(2:learnNumber+1, :) = XE(1:learnNumber, :)  X(1:learnNumber, :) = XE(1:learnNumber, :);    [P, N] = size(X);        %[Q, P] = size(D);           %Numero de Patrones P y Salidas Q   depth = 3;                  %Profundidad de la red (nro capas)    %Inicializar Matriz de Pesos para cada capa en el rango [-1,1]  W = cell(depth - 1, 1);  W{1} = 2.*rand(3, 2) - 1;  W{2} = 2.*rand(1, 3) - 1;  %Inicializar Matrices de los delta-pesos de ajuste  dW = cell(depth-1, 1);               %Pre-alocacion de los delta pesos  for m = 1:depth-1      dW{m} = zeros(size(W{m}));  end  %Inicializar los campos locales inducidos 'v'  V = cell(depth, 1);  V{2} = ones(3,1);  V{3} = ones(1,1);   %Inicializar las salidas 'y' de cada capa  y = cell(depth-1);             %Pre-alocacion de las salidas locales      %% 2. Calculo Forward y Backward para cada epoch  while (mse > dmse) && (epoch <= epochNumber)      e = zeros(learnNumber, 1);      count = 0;      p = 1 + learnNumber * epoch;            for p = p : learnNumber + p                V{1} = XE(p, :);        V{1} = V{1}.';        count++;                for i = 1 : depth - 1            y{i} = W{i} * V{i} - 1;            V{i+1} = tanh(y{i}); %Calculo de la salida con tangente hiperbolica        end                %Calculo de la seÃ±al de error        %e(:,p) = D(:,p)-v{end};        e(count, :) = (S(p, :) - V{end}).^2;                %Calculo de la energia del error        %if size(D, 1) == 1         %   err(1, p) = 0.5 * (e(:, p).^2);        %elseif size(D, 1) > 1         %   err(1, p) = 0.5 * sum(e(:, p).^2);        %end                %Calculo Backward capa-por-capa para cada patron p                %delta = e(:, p).*(tanh('dn', y{end}));             delta = derivateTanH(V{end}) .* (S(p, 1) - V{end});                %Ajuste de pesos        for i = depth-1 : 1                          dW{i} = rate * delta * V{i};            W{i} = W{i} + dW{i};                        if i > 1               delta = derivateTanH(V{i-1}) .* (W{i}.' * delta);            end        end              end      e      %Calculo del mean square error      mse = 0.5 * sum(e);      epoch = epoch + 1;      hold on      plot(epoch, mse, 'ro')      hold off  end  learn.weights = W;  learn.epochs = epoch - 1;  learn.error = mse;endfunctionfunction y = derivateTanH(x)  y = 1 - x.^2;endfunction