function output = test(X, X_mean, X_std, S, W, B, structure, act_func, test_percentage)[P, N] = size(X);amount_tested = floor(P * test_percentage);[aux, depth] = size(structure);              %Numero de Capas Ocultas "Depth"%Inicializar los campos locales inducidos 'v'V = cell(depth, 1);%Inicializar las salidas 'y' de cada capa y = cell(depth+1,1); output.approximate = zeros(amount_tested,1);output.evaluation = X(P-amount_tested:P, :);count = 1;e = zeros(amount_tested, 1);X_test = X(P-amount_tested:P, :);X_test = (X_test - X_mean) ./ X_std;for p = P - amount_tested : P    V{1} = X_test(count, :);  V{1} = V{1}.';  for i = 1 : depth - 1      y{i} = W{i} * V{i} + B{i};      if(strcmp(act_func, "tanh") == 1)        V{i+1} = tanh(y{i}); %Calculo de la salida con tangente hiperbolica      elseif(strcmp(act_func, "exp") == 1)        V{i+1} = sigmoid(y{i});      endif  end  %Calculo Backward capa-por-capa para cada patron p  if(strcmp(act_func, "tanh") == 1)    e(count, :) = (S(p, :) - 2 .* V{end}).^2;  elseif(strcmp(act_func, "exp") == 1)    e(count, :) = (S(p, :) - (4 .* V{end} - 2)).^2;  endif  e(count, :) = (S(p, :) - V{end}).^2;    output.approximate(count) = V{end};   count++;  endoutput.mse = sum(e) / amount_tested;